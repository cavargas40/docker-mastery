# Section Overview

-Defining the problem of persisten data
-Key concepts with containers:  immutable, ephemeral
-Learning and using Data Volumes
-Learning and using Bind Mounts
-Assignments

# Container Lifetime & Persisten Data

-Containers are usually immutable and ephemeral
-"Immutable infrastructure": only re-deploy containers, never change
-This is the ideal scenario, but what about databases, or unique data?
-Docker gives us features to ensure these "separation of concerns"
-This is known as "persisten data"
-Two ways: Data Volumes and Bind Mounts
-Volumes: make special location outside of container UFS
-Bind Mounts: link container path to host path

# Persisten Data: Data Volumes

VOLUME command in Dockerfile

docker volume prune

docker pull mysql
docker image inspect mysql
docker container run -d --name mysql mysql
docker container run -d --name mysqldb -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql

docker volume ls

named volumes
-friendly way to assign vols to containers

docker container run -d --name mysqldb -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql-db:/var/lib/mysql mysql

docker volume ls
docker volume inspect mysql-db

docker volume create
-required to do this before "docker run" to use custom drivers and labels

docker volume create --help

# Shell differences for Path Expansions
With Docker CLI, you can always use a full file path on any OS, but often you'll see me and others use a "parameter expansion" like $(pwd) which means "print working directory".

Here's the important part. Each shell may do this differently, so here's a cheat sheet for which OS and Shell your using. I'll be using $(pwd) on a Mac, but yours may be different!

This isn't a Docker thing, it's a Shell thing.

For PowerShell use: ${pwd} 

For cmd.exe "Command Prompt use: %cd%

Linux/macOS bash, sh, zsh, and Windows Docker Toolbox Quickstart Terminal use: $(pwd) 

Note, if you have spaces in your path, you'll usually need to quote the whole path in the docker command.

# Persistent Data: Bind Mounting

-Maps a host file or directory to a container file or directory
-Basically just two locations pointing to the same file(s)
-Again, skips UFS, and host files overwrite any in container
-Can't use in Dockerfile, must be at container run
-... run -v /Users/cavargas/stuff:/path/container (mac/linux)
-... run -v //c/Users/bret/stuff:/path/container (windows)

docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx

touch test.txt
-this new file appears inside the nginx because I create a mapping of the server in my actual local folder.


ASSIGNMENT:

# Database Upgrades with Named Volumes:

https://hub.docker.com/layers/postgres/library/postgres/9.6.1/images/sha256-4023a747a01a29f94939c41fc5c2441837d9ebc05030c2681dc47853d73978c5?context=explore

search for the VOLUME to get /var/lib/postgresql/data

docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1

docker container logs -f psql

docker container stop psql

docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2

docker container logs psql2

# Bind Mounts

-Use a Jekyll "Static Site Generator" to start a local web server
-Don't have to be web developer: this is example of bridging the gap between local file access and apps running in containers
-source code is in the course repo under bindmount/sample-1/
-We edit files with editor on our host using native tools
-Container detects changes with host files and updates web server
-start container with docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

-if i change the code, i can refresh the browser and check the new changes. (great)