# Overlay Multi-Host Networking

- Just choose --driver overal when creating network
- For container-to-container traffic inside a single Swarm
- Optional IPSec (AES) encryption on network creation
- Each service can be connected to multiple networks
   - (e.g. front-end, back-end)

In the example of the Cluster with 3 nodes:

## node 1
docker network create --driver overlay mydrupal
docker service create --name psql --network mydrupal -e  POSTGRES_PASSWORD=mypass postgres
docker service ls
docker service ps psql
docker container logs psql.1.ryhasjdhas347gh34j43534 
clear

docker service create --name drupal --network mydrupal -p 80:80 drupal
docker service ps
watch docker service ps
docker service ps drupal

# Scaling Out with Routing Mesh

- Routes ingress (incoming) packets for a Service to proper Task
- Spans all nodes in Swarm
- Uses IPVS from Linux Kernel
- Load balances Swarm Services across their Tasks
- Two ways this works:
   - Container-to-container in a Overlay Network (uses VIP)
   - External traffic incoming to published ports (all nodes listen)

The service enroute all the request in a virtual IP with a swarm load balancer to all the nodes... (making it accessible for any node)

## node 1
docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2
docker service ps search
curl localhost:9200

## Routing Mesh Cont.
- This is stateless load balancing
- This LB is at OSI Layer 3 (TCP), not Layer 4 (DNS)
- Both limitation can be overcome with:
  - Nginx or HAProxy LB proxy or:
  - Docker Enterprise Edition, which comes with built-in L4 web proxy

ASSIGNMENT
## Create Multi-Service App

- Using Docker's Distributed Voting App
- use swarm-app-1 directory in our course repo for requirements
- 1 volume, 2 networks, 5 services needed
- Create the commands needed, spin up services, and test app
- Everything is using Docker Hub images, so no data needed on Swarm
- Like many computer things, this is 1/2 art form and 1/2 science


## node 1
docker network create -d overlay backend
docker network create -d overlay frontend
docker service create --name vote -p 80:80 --network frontend --replicas 2 bretfisher/examplevotingapp_vote
docker service create --name redis --network frontend redis:3.2
docker service create --name db --network backend -e POSTGRES_HOST_AUTH_METHOD=trust --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4
docker service create --name worker --network frontend --network backend bretfisher/examplevotingapp_worker:java
docker service create --name result --network backend -p 5001:80 bretfisher/examplevotingapp_result

docker service ls
docker service ps result
docker service ps redis
docker service ps db
docker service ps worker

# Stacks: Production Grade Compose

- In 1.13 Docker adds a new layer of abstraction to Swarm called Stacks
- Stacks accept Compose files as their declarative definition for services, networks, and volumes
- We use docker stack deploy rather then docker service create
- Stacks manages all those objects for us, including overlay network per stack. Adds stack name to start of their name
- New deploy: key in Compose file. Can't do build:
- Compose now ignores deploy:, Swarm ignores build:
- docker-compose cli not needed on Swarm server

swarm/stack-1
docker stack deploy -c example-voting-app-stack.yml voteapp
-c = compose

docker stack ps vote
docker stack ps voteapp
docker container ls
docker stack services voteapp

docker stack ps voteapp
docker network ls

-make replicas changes always in the yml file, after that, 
docker stack deploy -c example-voting-app-stack.yml voteapp

## Swarm secrets - securely store your config vars

### Secrets Storage
- Easiest "secure" solution for storing secrets in Swarm
- What is a Secret?
   - Usernames and passwords
   - TLS certficates and keys
   - SSH Keys
   - Any data you would prefer not be "on front page of news"
- Supports generic strings or binary content up to 500Kb in size
- Doesn't require apps to be rewritten
- As of Docker 1.13.0 Swarm Raft DB is encrypted on disk
- Only stored on disk on Manager nodes
- Default is Managers and Workers "control plane" is TLS + Mutual Auth
- Secrets are first stored in Swarm, then assigned to a Service(s)
- Only container in assigned Service(s) can see them
- They look like files in container but are actually in-memory fs
- /run/secrets/<secret_name> or /run/secrets/<secret_alias>
- Local docker-compose can use file-based secrets, but not secure

### Secrets with Services - Assign secrets to swarm services

## node 1
secrets/sample-1
ls
cat psql_user.txt
docker secret create psql_user psql_user.txt
echo "myDBpassWORD" | docker secret create psql_pass -
docker secret ls
docker secret inspect psql_user
docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres

docker service ps psql
docker exec -it psql.1.u8jsghjadsgajhsd bash
   ls /run/secrets
   cat /run/secrets/psql_user
   exit
docker container logs psql.1.u8jsghjadsgajhsd bash
docker service ps psql
docker service update --secret--rm 

### Secrets with Swarm Stacks - Building stacks with Linked secrets

## node 1
secrets/sample-2

if you want to use docker-compose with secrets the version have to be 3.1

docker stack deploy -c docker-compose.yml mydb
docker secret ls
docker stack rm mydb

ASSIGNMENT:

## Create Stack w/ Secrets

- Lets use our Drupal compose file from last assignment (compose/assignment-2)
- Rename image back to official drupal:8.8
- Remove build:
- Add secret via external:
- use enviroment variable POSTGRES_PASSWORD_FILE
- Add secret via cli echo "<pw>" | docker secret create psql-w -
- Copy compose into a new yml file on you Swarm node1


## node 1
copy the file docker-compose.yml from secrets/assignment-1
echo "oagy938hs" | docker secret create psql-pw -
docker stack deploy -c docker-compose.yml drupal
docker stack ps drupal
